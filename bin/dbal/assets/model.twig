<?php

namespace {{ namespace }};

use ReactApp\DBAL\Model;
use Drift\DBAL\Result;
use React\Promise\PromiseInterface;

class {{ model.name|db_to_camel }} extends {{ model.extends|default('Model') }}{% if model.implements is not empty %} implements {{ model.implements|join(', ') }}{% endif %}

{
    protected string $_table = '{{ model.name }}';
    protected string $_model = self::class;

{% for column, info in model.columns %}
{% set nullable = (column == model.primary|first or (info.options.notnull is defined and info.options.notnull == false)) %}
    protected {% if nullable %}?{% endif %}{{ info.type|to_php_type }} ${{ column }}{% if nullable %} = null{% endif %};
{% endfor %}

    public function __construct(?int $id = null)
    {
        parent::__construct(json_decode('{{ model|json_encode|replace({'\\': '\\\\'})|raw }}', true));
        if ($id !== null) {
            $this->get($id);
        }
    }

    public function getId(): ?int
    {
        return $this->{{ model.primary|first }};
    }

{% for column, info in model.columns %}
{% set nullable = (column == model.primary|first or (info.options.notnull is defined and info.options.notnull == false)) %}
    public function get{{ column|db_to_camel }}(): {% if nullable %}?{% endif %}{{ info.type|to_php_type }}
    {
        return $this->{{ column }};
    }

{% if column != model.primary|first %}
{% set nullable = (column == model.primary|first or (info.options.notnull is defined and info.options.notnull == false)) %}
    public function set{{ column|db_to_camel }}({% if nullable %}?{% endif %}{{ info.type|to_php_type }} ${{ column }}): self
    {
        $this->{{ column }} = ${{ column }};
        return $this;
    }
{% endif %}
{% endfor %}
{% if model.relations.many_to_many is not empty %}

{% for relation in model.relations.many_to_many %}{% set relation_table = relation.name|default(relation.table) %}{% set many_to_many = model.name|many_to_many(relation_table) %}

    public function get{{ relation_table|db_to_camel }}s(): PromiseInterface
    {
        $queryBuilder = self::$connection->createQueryBuilder();
        $queryBuilder
            ->select('*')
            ->from('{{ relation_table }}', 'r')
            ->innerJoin('r', '{{ relation_table }}_of_{{ model.name }}', 'mtm', 'r.{{ relation_table }}_id = mtm.{{ relation_table }}_id')
            ->where('mtm.{{ model.name }}_id = ?')
            ->setParameters([$this->getId()]);
        return self::$connection
            ->query($queryBuilder)
            ->then(function(Result ${{ relation_table }}s) {
                $items = [];
                if (${{ relation_table }}s->fetchCount() > 0) {
                    foreach (${{ relation_table }}s->fetchAllRows() as ${{ relation_table }}) {
                        $items[] = (new {{ relation.table|db_to_camel }}())->populate(${{ relation_table }});
                    }
                }
                return $items;
            });
    }

    public function add{{ relation_table|db_to_camel }}({{ relation.table|db_to_camel }} ${{ relation_table }}): PromiseInterface
    {
        return self::$connection->insert('{{ relation_table }}_of_{{ model.name }}', [
            '{{ relation_table }}_id' => ${{ relation_table }}->getId(),
            '{{ model.name }}_id' => $this->getId(),
        ]);
    }

    public function remove{{ relation_table|db_to_camel }}({{ relation.table|db_to_camel }} ${{ relation_table }}): PromiseInterface
    {
        return self::$connection->delete('{{ relation_table }}_of_{{ model.name }}', [
            '{{ relation_table }}_id' => ${{ relation_table }}->getId(),
            '{{ model.name }}_id' => $this->getId(),
        ]);
    }
{% endfor %}
{% endif %}
{% if model.relations.one_to_many is not empty %}
{% for relation in model.relations.one_to_many %}{% set relation_table = relation.name|default(relation.table) %}

    public function get{{ relation_table|db_to_camel }}s(): PromiseInterface
    {
        return (new {{ relation.table|db_to_camel }}())->findBy(['{{ relation.name|default(model.name) }}_id' => $this->getId()]);
    }

    public function add{{ relation_table|db_to_camel }}({{ relation.table|db_to_camel }} ${{ relation_table }}): PromiseInterface
    {
        return ${{ relation_table }}->set{{ relation.name|default(model.name)|db_to_camel }}Id($this->getId())->flush();
    }
{% endfor %}
{% endif %}
{% if model.relations.many_to_one is not empty %}
{% for relation in model.relations.many_to_one %}{% set relation_table = relation.name|default(relation.table) %}

    public function get{{ relation_table|db_to_camel }}(): PromiseInterface
    {
        return (new {{ relation.table|db_to_camel }}())->get($this->get{{ relation_table|db_to_camel }}Id());
    }

    public function set{{ relation_table|db_to_camel }}({{ relation.table|db_to_camel }} ${{ relation_table }}): self
    {
        return $this->set{{ relation_table|db_to_camel }}Id(${{ relation_table }}->getId());
    }
{% endfor %}
{% endif %}
}
